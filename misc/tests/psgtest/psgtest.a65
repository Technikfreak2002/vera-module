; x16test.a65

VIA1_BASE = $9F60
VIA1_ORB  = (VIA1_BASE + $0)
VIA1_ORA  = (VIA1_BASE + $1)
VIA1_DDRB = (VIA1_BASE + $2)
VIA1_DDRA = (VIA1_BASE + $3)

VIA2_BASE = $9F70
VIA2_ORB  = (VIA2_BASE + $0)
VIA2_ORA  = (VIA2_BASE + $1)
VIA2_DDRB = (VIA2_BASE + $2)
VIA2_DDRA = (VIA2_BASE + $3)

VERA_BASE = $9F20

VERA_ADDR_L   	  = (VERA_BASE + $00)
VERA_ADDR_M   	  = (VERA_BASE + $01)
VERA_ADDR_H   	  = (VERA_BASE + $02)
VERA_DATA0        = (VERA_BASE + $03)
VERA_DATA1        = (VERA_BASE + $04)
VERA_CTRL         = (VERA_BASE + $05)

VERA_IEN          = (VERA_BASE + $06)
VERA_ISR          = (VERA_BASE + $07)
VERA_IRQ_LINE_L   = (VERA_BASE + $08)

VERA_DC_VIDEO     = (VERA_BASE + $09)
VERA_DC_HSCALE    = (VERA_BASE + $0A)
VERA_DC_VSCALE    = (VERA_BASE + $0B)
VERA_DC_BORDER    = (VERA_BASE + $0C)

VERA_DC_HSTART    = (VERA_BASE + $09)
VERA_DC_HSTOP     = (VERA_BASE + $0A)
VERA_DC_VSTART    = (VERA_BASE + $0B)
VERA_DC_VSTOP     = (VERA_BASE + $0C)

VERA_L0_CONFIG    = (VERA_BASE + $0D)
VERA_L0_MAPBASE   = (VERA_BASE + $0E)
VERA_L0_TILEBASE  = (VERA_BASE + $0F)
VERA_L0_HSCROLL_L = (VERA_BASE + $10)
VERA_L0_HSCROLL_H = (VERA_BASE + $11)
VERA_L0_VSCROLL_L = (VERA_BASE + $12)
VERA_L0_VSCROLL_H = (VERA_BASE + $13)

VERA_L1_CONFIG    = (VERA_BASE + $14)
VERA_L1_MAPBASE   = (VERA_BASE + $15)
VERA_L1_TILEBASE  = (VERA_BASE + $16)
VERA_L1_HSCROLL_L = (VERA_BASE + $17)
VERA_L1_HSCROLL_H = (VERA_BASE + $18)
VERA_L1_VSCROLL_L = (VERA_BASE + $19)
VERA_L1_VSCROLL_H = (VERA_BASE + $1A)

VERA_AUDIO_CTRL   = (VERA_BASE + $1B)
VERA_AUDIO_RATE   = (VERA_BASE + $1C)
VERA_AUDIO_DATA   = (VERA_BASE + $1D)

VERA_SPI_DATA     = (VERA_BASE + $1E)
VERA_SPI_CTRL     = (VERA_BASE + $1F)

CINV = $0314

PTR = $10
PTR2 = $12


MUSIC_L   = $20
MUSIC_H   = $21
FRAMEWAIT = $22



	* = $07FF
	.byte $01, $08, $0C, $08, $0A, $00, $9E, $20
	.byte $32, $30, $36, $34, $00, $00, $00, $00
	.byte $00
	* = $0810

	jsr music_play_init

	; Install IRQ handler
	sei
	lda CINV
	sta cinv_org
	lda CINV + 1
	sta cinv_org + 1
	lda #<irq_handler
	sta CINV
	lda #>irq_handler
	sta CINV+1
	cli

loop:	jmp loop

cinv_org: .byte 0,0

vera_save:
	plx
	ply
	lda VERA_CTRL
	pha
	stz VERA_CTRL
	lda VERA_ADDR_L
	pha
	lda VERA_ADDR_M
	pha
	lda VERA_ADDR_H
	pha
	phy
	phx
	rts

vera_restore:
	plx
	ply
	pla
	sta VERA_ADDR_H
	pla
	sta VERA_ADDR_M
	pla
	sta VERA_ADDR_L
	pla
	sta VERA_CTRL
	phy
	phx
	rts



irq_handler:
	jsr vera_save

	stz VERA_ADDR_L
	stz VERA_ADDR_M
	stz VERA_ADDR_H
	inc VERA_DATA0

	jsr vera_restore

	jsr music_play_irq

	jmp (cinv_org)


AUDIO_BASE = $C0


music_play_init:
	lda #<music_data
	sta MUSIC_L
	lda #>music_data
	sta MUSIC_H
	lda #0
	sta FRAMEWAIT

	lda #$01
	sta VERA_ADDR_H
	lda #$F9
	sta VERA_ADDR_M

	; Set square wave for all 3 channels
	lda #AUDIO_BASE + 3
	sta VERA_ADDR_L
	lda #$7F
	sta VERA_DATA0

	lda #AUDIO_BASE + 7
	sta VERA_ADDR_L
	lda #$7F
	sta VERA_DATA0

	lda #AUDIO_BASE + 11
	sta VERA_ADDR_L
	lda #$7F
	sta VERA_DATA0

	rts

music_play_irq:
	lda FRAMEWAIT
	beq music_handler
	dec FRAMEWAIT
	jmp music_done

music_handler:
	lda #$01
	sta VERA_ADDR_H
	lda #$F9
	sta VERA_ADDR_M


	; Load command byte
	lda (MUSIC_L)

	; Check end-of-music?
	cmp #$00
	bne handle_cmd
	jmp music_done

handle_cmd:
	; Next byte
	inc MUSIC_L
	bne handle_cmd2
	inc MUSIC_H
handle_cmd2:
	; Check command byte
	cmp #$10
	beq freq_ch0
	cmp #$11
	beq freq_ch1
	cmp #$12
	beq freq_ch2
	cmp #$20
	beq vol_ch0
	cmp #$21
	beq vol_ch1
	cmp #$22
	beq vol_ch2
	cmp #$30
	beq wait_frames
	jmp music_done

freq_ch0:
	; Lower frequency byte
	lda #AUDIO_BASE + 0
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	; Next byte
	inc MUSIC_L
	bne freq_ch0_2
	inc MUSIC_H
freq_ch0_2:
	; Upper frequency byte
	lda #AUDIO_BASE + 1
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	bra next_cmd

freq_ch1:
	; Lower frequency byte
	lda #AUDIO_BASE + 4
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	; Next byte
	inc MUSIC_L
	bne freq_ch1_2
	inc MUSIC_H
freq_ch1_2:
	; Upper frequency byte
	lda #AUDIO_BASE + 5
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	bra next_cmd

freq_ch2:
	; Lower frequency byte
	lda #AUDIO_BASE + 8
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	; Next byte
	inc MUSIC_L
	bne freq_ch2_2
	inc MUSIC_H
freq_ch2_2:
	; Upper frequency byte
	lda #AUDIO_BASE + 9
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	bra next_cmd

vol_ch0:
	; Volume byte
	lda #AUDIO_BASE + 2
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	bra next_cmd

vol_ch1:
	; Volume byte
	lda #AUDIO_BASE + 6
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	bra next_cmd

vol_ch2:
	; Volume byte
	lda #AUDIO_BASE + 10
	sta VERA_ADDR_L
	lda (MUSIC_L)
	sta VERA_DATA0

	bra next_cmd

wait_frames:
	; Wait frame count byte
	lda (MUSIC_L)
	sta FRAMEWAIT

	; Next byte
	inc MUSIC_L
	bne wait_frames_2
	inc MUSIC_H
wait_frames_2:
	; Done for this vsync
	bra music_done

next_cmd:
	; Next byte
	inc MUSIC_L
	bne next_cmd2
	inc MUSIC_H
next_cmd2:
	jmp music_handler

music_done:
	rts


music_data: .bin 0,15696,"music.bin"
