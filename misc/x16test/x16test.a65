; x16test.a65

VIA1_BASE = $9F60
VIA1_ORB  = (VIA1_BASE + $0)
VIA1_ORA  = (VIA1_BASE + $1)
VIA1_DDRB = (VIA1_BASE + $2)
VIA1_DDRA = (VIA1_BASE + $3)

VIA2_BASE = $9F70
VIA2_ORB  = (VIA2_BASE + $0)
VIA2_ORA  = (VIA2_BASE + $1)
VIA2_DDRB = (VIA2_BASE + $2)
VIA2_DDRA = (VIA2_BASE + $3)

VERA_BASE = $9F20

VRAM_ADDR_LO    = (VERA_BASE + $00)
VRAM_ADDR_MID   = (VERA_BASE + $01)
VRAM_ADDR_HI    = (VERA_BASE + $02)
VRAM_DATA0      = (VERA_BASE + $03)
VRAM_DATA1      = (VERA_BASE + $04)
VRAM_CTRL       = (VERA_BASE + $05)
IRQ_ENABLE      = (VERA_BASE + $06)
STATUS          = (VERA_BASE + $07)
IRQ_LINE_L      = (VERA_BASE + $08)
DC_VIDEO        = (VERA_BASE + $09)
DC_HSCALE       = (VERA_BASE + $0A)
DC_VSCALE       = (VERA_BASE + $0B)
DC_BORDER_COLOR = (VERA_BASE + $0C)
DC_HSTART_L     = (VERA_BASE + $0D)
DC_HSTOP_L      = (VERA_BASE + $0E)
DC_VSTART_L     = (VERA_BASE + $0F)
DC_VSTOP_L      = (VERA_BASE + $10)
DC_STARTSTOP_H  = (VERA_BASE + $11)
Lx_CTRL0        = (VERA_BASE + $12)
Lx_CTRL1        = (VERA_BASE + $13)
Lx_MAP_BASE     = (VERA_BASE + $14)
Lx_TILE_BASE    = (VERA_BASE + $15)
L0_HSCROLL_L    = (VERA_BASE + $16)
L0_HSCROLL_H    = (VERA_BASE + $17)
L0_VSCROLL_L    = (VERA_BASE + $18)
L0_VSCROLL_H    = (VERA_BASE + $19)
L1_HSCROLL_L    = (VERA_BASE + $1A)
L1_HSCROLL_H    = (VERA_BASE + $1B)
L1_VSCROLL_L    = (VERA_BASE + $1C)
L1_VSCROLL_H    = (VERA_BASE + $1D)
SPI_DATA        = (VERA_BASE + $1E)
SPI_CTRL        = (VERA_BASE + $1F)

	* = $C000
reset_entry
	sei		; Disable IRQs
	cld		; Clear decimal mode
	lda #$01	; Configure VIA2 data direction
	sta VIA2_DDRB

	jsr delay
	lda #$11
	sta DC_VIDEO

loop
	; lda #$01
	; sta VIA2_ORB

	; jsr delay
	; lda #$00
	; sta VIA2_ORB
	; jsr delay

	jsr wait_vsync
	inc L0_HSCROLL_L
	jmp loop


wait_vsync
	lda STATUS
	and #$01
	beq wait_vsync
	sta STATUS
	rts

	; Delay
delay
	ldy #0
inner_loop1
	ldx #0
inner_loop2
	dex
	bne inner_loop2
	dey
	bne inner_loop1
	rts

nmi_entry
	rti

irq_entry
	rti

	.dsb $FFFA - *, $ff;
	.word nmi_entry
	.word reset_entry
	.word irq_entry
